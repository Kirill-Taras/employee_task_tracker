name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install flake8
    - name: Run Flake8
      run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
        run: |
          python manage.py test
#
#  build:
#    runs-on: ubuntu-latest
#    needs: test
#
#    steps:
#    - name: Check out code
#      uses: actions/checkout@v3
#
#    - name: Log in to Docker Hub
#      run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#    - name: Build Docker image
#      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
#
#    - name: Push Docker image to Docker Hub
#      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.7.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_KEY }}
#
#      - name: Create .env file
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#          cat > .env <<EOL
#              DB_NAME=${{ secrets.DB_NAME }}
#              DB_USER=${{ secrets.DB_USER }}
#              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
#              DB_HOST=${{ secrets.DB_HOST }}
#              DB_PORT=${{ secrets.DB_PORT }}
#              CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
#              CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
#            EOL
#
#      - name: Deploy to Server
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#            sudo docker stop myapp || true
#            sudo docker rm myapp || true
#            sudo docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#          EOF
