name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install flake8
    - name: Run Flake8
      run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run tests
        run: |
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/employee_task_tracker:${{ github.sha }} .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/employee_task_tracker:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Create .env file
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            mkdir -p ${{ secrets.DEPLOY_DIR }}
            cd ${{ secrets.DEPLOY_DIR }}
            
            # Создаём .env файл для Django
            cat > .env <<EOL
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOL
          EOF

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
  
            echo "📦 Тянем свежий образ..."
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/employee_task_tracker:${{ github.sha }}
  
            echo "🛑 Удаляем старый контейнер (если есть)..."
            if [ "$(sudo docker ps -a -q --filter name=employee_task_tracker)" ]; then
              sudo docker stop employee_task_tracker || true
              sudo docker rm employee_task_tracker || true
            fi
  
            echo "🚀 Запускаем новый контейнер..."
            sudo docker run -d \
              --name employee_task_tracker \
              --env-file .env \
              -p 80:8000 \
              ${{ secrets.DOCKER_HUB_USERNAME }}/employee_task_tracker:${{ github.sha }}
  
            echo "⚙️ Применяем миграции..."
            sudo docker exec employee_task_tracker python manage.py migrate --noinput
  
            echo "📂 Собираем статику..."
            sudo docker exec employee_task_tracker python manage.py collectstatic --noinput
          EOF
